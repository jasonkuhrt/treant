/**
 * Node type guards and utilities
 * @generated
 */

export { Node } from 'web-tree-sitter';

// Anonymous node types
export * as Anonymous from './anonymous/$.js';

export type { AliasNode as Alias } from './alias.js';
export { isAliasNode } from './alias.js';
export { isAliasNode as isAlias } from './alias.js';
export type { ArgumentNode as Argument } from './argument.js';
export { isArgumentNode } from './argument.js';
export { isArgumentNode as isArgument } from './argument.js';
export type { ArgumentsNode as Arguments } from './arguments.js';
export { isArgumentsNode } from './arguments.js';
export { isArgumentsNode as isArguments } from './arguments.js';
export type { ArgumentsDefinitionNode as ArgumentsDefinition } from './arguments_definition.js';
export { isArgumentsDefinitionNode } from './arguments_definition.js';
export { isArgumentsDefinitionNode as isArgumentsDefinition } from './arguments_definition.js';
export type { BooleanValueNode as BooleanValue } from './boolean_value.js';
export { isBooleanValueNode } from './boolean_value.js';
export { isBooleanValueNode as isBooleanValue } from './boolean_value.js';
export type { DefaultValueNode as DefaultValue } from './default_value.js';
export { isDefaultValueNode } from './default_value.js';
export { isDefaultValueNode as isDefaultValue } from './default_value.js';
export type { DefinitionNode as Definition } from './definition.js';
export { isDefinitionNode } from './definition.js';
export { isDefinitionNode as isDefinition } from './definition.js';
export type { DescriptionNode as Description } from './description.js';
export { isDescriptionNode } from './description.js';
export { isDescriptionNode as isDescription } from './description.js';
export type { DirectiveNode as Directive } from './directive.js';
export { isDirectiveNode } from './directive.js';
export { isDirectiveNode as isDirective } from './directive.js';
export type { DirectiveDefinitionNode as DirectiveDefinition } from './directive_definition.js';
export { isDirectiveDefinitionNode } from './directive_definition.js';
export { isDirectiveDefinitionNode as isDirectiveDefinition } from './directive_definition.js';
export type { DirectiveLocationNode as DirectiveLocation } from './directive_location.js';
export { isDirectiveLocationNode } from './directive_location.js';
export { isDirectiveLocationNode as isDirectiveLocation } from './directive_location.js';
export type { DirectiveLocationsNode as DirectiveLocations } from './directive_locations.js';
export { isDirectiveLocationsNode } from './directive_locations.js';
export { isDirectiveLocationsNode as isDirectiveLocations } from './directive_locations.js';
export type { DirectivesNode as Directives } from './directives.js';
export { isDirectivesNode } from './directives.js';
export { isDirectivesNode as isDirectives } from './directives.js';
export type { DocumentNode as Document } from './document.js';
export { isDocumentNode } from './document.js';
export { isDocumentNode as isDocument } from './document.js';
export type { EnumTypeDefinitionNode as EnumTypeDefinition } from './enum_type_definition.js';
export { isEnumTypeDefinitionNode } from './enum_type_definition.js';
export { isEnumTypeDefinitionNode as isEnumTypeDefinition } from './enum_type_definition.js';
export type { EnumTypeExtensionNode as EnumTypeExtension } from './enum_type_extension.js';
export { isEnumTypeExtensionNode } from './enum_type_extension.js';
export { isEnumTypeExtensionNode as isEnumTypeExtension } from './enum_type_extension.js';
export type { EnumValueNode as EnumValue } from './enum_value.js';
export { isEnumValueNode } from './enum_value.js';
export { isEnumValueNode as isEnumValue } from './enum_value.js';
export type { EnumValueDefinitionNode as EnumValueDefinition } from './enum_value_definition.js';
export { isEnumValueDefinitionNode } from './enum_value_definition.js';
export { isEnumValueDefinitionNode as isEnumValueDefinition } from './enum_value_definition.js';
export type { EnumValuesDefinitionNode as EnumValuesDefinition } from './enum_values_definition.js';
export { isEnumValuesDefinitionNode } from './enum_values_definition.js';
export { isEnumValuesDefinitionNode as isEnumValuesDefinition } from './enum_values_definition.js';
export type { ExecutableDefinitionNode as ExecutableDefinition } from './executable_definition.js';
export { isExecutableDefinitionNode } from './executable_definition.js';
export { isExecutableDefinitionNode as isExecutableDefinition } from './executable_definition.js';
export type { ExecutableDirectiveLocationNode as ExecutableDirectiveLocation } from './executable_directive_location.js';
export { isExecutableDirectiveLocationNode } from './executable_directive_location.js';
export { isExecutableDirectiveLocationNode as isExecutableDirectiveLocation } from './executable_directive_location.js';
export type { FieldNode as Field } from './field.js';
export { isFieldNode } from './field.js';
export { isFieldNode as isField } from './field.js';
export type { FieldDefinitionNode as FieldDefinition } from './field_definition.js';
export { isFieldDefinitionNode } from './field_definition.js';
export { isFieldDefinitionNode as isFieldDefinition } from './field_definition.js';
export type { FieldsDefinitionNode as FieldsDefinition } from './fields_definition.js';
export { isFieldsDefinitionNode } from './fields_definition.js';
export { isFieldsDefinitionNode as isFieldsDefinition } from './fields_definition.js';
export type { FragmentDefinitionNode as FragmentDefinition } from './fragment_definition.js';
export { isFragmentDefinitionNode } from './fragment_definition.js';
export { isFragmentDefinitionNode as isFragmentDefinition } from './fragment_definition.js';
export type { FragmentNameNode as FragmentName } from './fragment_name.js';
export { isFragmentNameNode } from './fragment_name.js';
export { isFragmentNameNode as isFragmentName } from './fragment_name.js';
export type { FragmentSpreadNode as FragmentSpread } from './fragment_spread.js';
export { isFragmentSpreadNode } from './fragment_spread.js';
export { isFragmentSpreadNode as isFragmentSpread } from './fragment_spread.js';
export type { ImplementsInterfacesNode as ImplementsInterfaces } from './implements_interfaces.js';
export { isImplementsInterfacesNode } from './implements_interfaces.js';
export { isImplementsInterfacesNode as isImplementsInterfaces } from './implements_interfaces.js';
export type { InlineFragmentNode as InlineFragment } from './inline_fragment.js';
export { isInlineFragmentNode } from './inline_fragment.js';
export { isInlineFragmentNode as isInlineFragment } from './inline_fragment.js';
export type { InputFieldsDefinitionNode as InputFieldsDefinition } from './input_fields_definition.js';
export { isInputFieldsDefinitionNode } from './input_fields_definition.js';
export { isInputFieldsDefinitionNode as isInputFieldsDefinition } from './input_fields_definition.js';
export type { InputObjectTypeDefinitionNode as InputObjectTypeDefinition } from './input_object_type_definition.js';
export { isInputObjectTypeDefinitionNode } from './input_object_type_definition.js';
export { isInputObjectTypeDefinitionNode as isInputObjectTypeDefinition } from './input_object_type_definition.js';
export type { InputObjectTypeExtensionNode as InputObjectTypeExtension } from './input_object_type_extension.js';
export { isInputObjectTypeExtensionNode } from './input_object_type_extension.js';
export { isInputObjectTypeExtensionNode as isInputObjectTypeExtension } from './input_object_type_extension.js';
export type { InputValueDefinitionNode as InputValueDefinition } from './input_value_definition.js';
export { isInputValueDefinitionNode } from './input_value_definition.js';
export { isInputValueDefinitionNode as isInputValueDefinition } from './input_value_definition.js';
export type { InterfaceTypeDefinitionNode as InterfaceTypeDefinition } from './interface_type_definition.js';
export { isInterfaceTypeDefinitionNode } from './interface_type_definition.js';
export { isInterfaceTypeDefinitionNode as isInterfaceTypeDefinition } from './interface_type_definition.js';
export type { InterfaceTypeExtensionNode as InterfaceTypeExtension } from './interface_type_extension.js';
export { isInterfaceTypeExtensionNode } from './interface_type_extension.js';
export { isInterfaceTypeExtensionNode as isInterfaceTypeExtension } from './interface_type_extension.js';
export type { ListTypeNode as ListType } from './list_type.js';
export { isListTypeNode } from './list_type.js';
export { isListTypeNode as isListType } from './list_type.js';
export type { ListValueNode as ListValue } from './list_value.js';
export { isListValueNode } from './list_value.js';
export { isListValueNode as isListValue } from './list_value.js';
export type { NamedTypeNode as NamedType } from './named_type.js';
export { isNamedTypeNode } from './named_type.js';
export { isNamedTypeNode as isNamedType } from './named_type.js';
export type { NonNullTypeNode as NonNullType } from './non_null_type.js';
export { isNonNullTypeNode } from './non_null_type.js';
export { isNonNullTypeNode as isNonNullType } from './non_null_type.js';
export type { ObjectFieldNode as ObjectField } from './object_field.js';
export { isObjectFieldNode } from './object_field.js';
export { isObjectFieldNode as isObjectField } from './object_field.js';
export type { ObjectTypeDefinitionNode as ObjectTypeDefinition } from './object_type_definition.js';
export { isObjectTypeDefinitionNode } from './object_type_definition.js';
export { isObjectTypeDefinitionNode as isObjectTypeDefinition } from './object_type_definition.js';
export type { ObjectTypeExtensionNode as ObjectTypeExtension } from './object_type_extension.js';
export { isObjectTypeExtensionNode } from './object_type_extension.js';
export { isObjectTypeExtensionNode as isObjectTypeExtension } from './object_type_extension.js';
export type { ObjectValueNode as ObjectValue } from './object_value.js';
export { isObjectValueNode } from './object_value.js';
export { isObjectValueNode as isObjectValue } from './object_value.js';
export type { OperationDefinitionNode as OperationDefinition } from './operation_definition.js';
export { isOperationDefinitionNode } from './operation_definition.js';
export { isOperationDefinitionNode as isOperationDefinition } from './operation_definition.js';
export type { OperationTypeNode as OperationType } from './operation_type.js';
export { isOperationTypeNode } from './operation_type.js';
export { isOperationTypeNode as isOperationType } from './operation_type.js';
export type { RootOperationTypeDefinitionNode as RootOperationTypeDefinition } from './root_operation_type_definition.js';
export { isRootOperationTypeDefinitionNode } from './root_operation_type_definition.js';
export { isRootOperationTypeDefinitionNode as isRootOperationTypeDefinition } from './root_operation_type_definition.js';
export type { ScalarTypeDefinitionNode as ScalarTypeDefinition } from './scalar_type_definition.js';
export { isScalarTypeDefinitionNode } from './scalar_type_definition.js';
export { isScalarTypeDefinitionNode as isScalarTypeDefinition } from './scalar_type_definition.js';
export type { ScalarTypeExtensionNode as ScalarTypeExtension } from './scalar_type_extension.js';
export { isScalarTypeExtensionNode } from './scalar_type_extension.js';
export { isScalarTypeExtensionNode as isScalarTypeExtension } from './scalar_type_extension.js';
export type { SchemaDefinitionNode as SchemaDefinition } from './schema_definition.js';
export { isSchemaDefinitionNode } from './schema_definition.js';
export { isSchemaDefinitionNode as isSchemaDefinition } from './schema_definition.js';
export type { SchemaExtensionNode as SchemaExtension } from './schema_extension.js';
export { isSchemaExtensionNode } from './schema_extension.js';
export { isSchemaExtensionNode as isSchemaExtension } from './schema_extension.js';
export type { SelectionNode as Selection } from './selection.js';
export { isSelectionNode } from './selection.js';
export { isSelectionNode as isSelection } from './selection.js';
export type { SelectionSetNode as SelectionSet } from './selection_set.js';
export { isSelectionSetNode } from './selection_set.js';
export { isSelectionSetNode as isSelectionSet } from './selection_set.js';
export type { SourceFileNode as SourceFile } from './source_file.js';
export { isSourceFileNode } from './source_file.js';
export { isSourceFileNode as isSourceFile } from './source_file.js';
export type { StringValueNode as StringValue } from './string_value.js';
export { isStringValueNode } from './string_value.js';
export { isStringValueNode as isStringValue } from './string_value.js';
export type { TypeNode as Type } from './type.js';
export { isTypeNode } from './type.js';
export { isTypeNode as isType } from './type.js';
export type { TypeConditionNode as TypeCondition } from './type_condition.js';
export { isTypeConditionNode } from './type_condition.js';
export { isTypeConditionNode as isTypeCondition } from './type_condition.js';
export type { TypeDefinitionNode as TypeDefinition } from './type_definition.js';
export { isTypeDefinitionNode } from './type_definition.js';
export { isTypeDefinitionNode as isTypeDefinition } from './type_definition.js';
export type { TypeExtensionNode as TypeExtension } from './type_extension.js';
export { isTypeExtensionNode } from './type_extension.js';
export { isTypeExtensionNode as isTypeExtension } from './type_extension.js';
export type { TypeSystemDefinitionNode as TypeSystemDefinition } from './type_system_definition.js';
export { isTypeSystemDefinitionNode } from './type_system_definition.js';
export { isTypeSystemDefinitionNode as isTypeSystemDefinition } from './type_system_definition.js';
export type { TypeSystemDirectiveLocationNode as TypeSystemDirectiveLocation } from './type_system_directive_location.js';
export { isTypeSystemDirectiveLocationNode } from './type_system_directive_location.js';
export { isTypeSystemDirectiveLocationNode as isTypeSystemDirectiveLocation } from './type_system_directive_location.js';
export type { TypeSystemExtensionNode as TypeSystemExtension } from './type_system_extension.js';
export { isTypeSystemExtensionNode } from './type_system_extension.js';
export { isTypeSystemExtensionNode as isTypeSystemExtension } from './type_system_extension.js';
export type { UnionMemberTypesNode as UnionMemberTypes } from './union_member_types.js';
export { isUnionMemberTypesNode } from './union_member_types.js';
export { isUnionMemberTypesNode as isUnionMemberTypes } from './union_member_types.js';
export type { UnionTypeDefinitionNode as UnionTypeDefinition } from './union_type_definition.js';
export { isUnionTypeDefinitionNode } from './union_type_definition.js';
export { isUnionTypeDefinitionNode as isUnionTypeDefinition } from './union_type_definition.js';
export type { UnionTypeExtensionNode as UnionTypeExtension } from './union_type_extension.js';
export { isUnionTypeExtensionNode } from './union_type_extension.js';
export { isUnionTypeExtensionNode as isUnionTypeExtension } from './union_type_extension.js';
export type { ValueNode as Value } from './value.js';
export { isValueNode } from './value.js';
export { isValueNode as isValue } from './value.js';
export type { VariableNode as Variable } from './variable.js';
export { isVariableNode } from './variable.js';
export { isVariableNode as isVariable } from './variable.js';
export type { VariableDefinitionNode as VariableDefinition } from './variable_definition.js';
export { isVariableDefinitionNode } from './variable_definition.js';
export { isVariableDefinitionNode as isVariableDefinition } from './variable_definition.js';
export type { VariableDefinitionsNode as VariableDefinitions } from './variable_definitions.js';
export { isVariableDefinitionsNode } from './variable_definitions.js';
export { isVariableDefinitionsNode as isVariableDefinitions } from './variable_definitions.js';
export type { CommaNode as Comma } from './comma.js';
export { isCommaNode } from './comma.js';
export { isCommaNode as isComma } from './comma.js';
export type { CommentNode as Comment } from './comment.js';
export { isCommentNode } from './comment.js';
export { isCommentNode as isComment } from './comment.js';
export type { FloatValueNode as FloatValue } from './float_value.js';
export { isFloatValueNode } from './float_value.js';
export { isFloatValueNode as isFloatValue } from './float_value.js';
export type { IntValueNode as IntValue } from './int_value.js';
export { isIntValueNode } from './int_value.js';
export { isIntValueNode as isIntValue } from './int_value.js';
export type { NameNode as Name } from './name.js';
export { isNameNode } from './name.js';
export { isNameNode as isName } from './name.js';
export type { NullValueNode as NullValue } from './null_value.js';
export { isNullValueNode } from './null_value.js';
export { isNullValueNode as isNullValue } from './null_value.js';